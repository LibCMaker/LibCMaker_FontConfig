# === Common ===

sudo: false

language: cpp

env:
  global:
    # NOTE: LibCMaker lib name.
    # NOTE: See below the lib deps in 'before_install' for every target OS.
    - cmr_LIB_NAME=FontConfig
    - cmr_BUILD_TESTING=ON

    - cmr_WORK_DIR=${HOME}
    - cmr_REPO_DIR=${HOME}/build/LibCMaker/LibCMaker_${cmr_LIB_NAME}
    - cmr_SAMPLE_SRC_DIR=${cmr_REPO_DIR}/samples/TestCompileWith${cmr_LIB_NAME}
    - cmr_SAMPLE_DIR=${cmr_WORK_DIR}/TestCompileWith${cmr_LIB_NAME}
    - cmr_SAMPLE_LIB_DIR=${cmr_SAMPLE_DIR}/libs

    - cmr_BUILD_DIR=${cmr_SAMPLE_DIR}/build
    - cmr_INSTALL_DIR=${cmr_BUILD_DIR}/install
    - cmr_DOWNLOAD_DIR=${cmr_BUILD_DIR}/download

    - cmr_JOBS_CNT=4


# === Linux ===

build_linux: &build_linux
  stage: Test
  os: linux
  dist: bionic

  env: &build_linux_env
    - cmr_TARGET_OS=linux
    - cmr_JOBS="-j${cmr_JOBS_CNT}"

    - cmr_CMAKE_RELEASE=cmake-3.4.0-Linux-x86_64
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}
    - cmr_CMAKE_CMD=${cmr_CMAKE_DIR}/bin/cmake
    - cmr_CTEST_CMD=${cmr_CMAKE_DIR}/bin/ctest

  before_install:
    - cp -r ${cmr_SAMPLE_SRC_DIR} ${cmr_WORK_DIR}
    - mkdir ${cmr_SAMPLE_LIB_DIR}
    - cp -r ${cmr_REPO_DIR} ${cmr_SAMPLE_LIB_DIR}

    - mkdir ${cmr_BUILD_DIR}
    - mkdir ${cmr_INSTALL_DIR}
    - mkdir ${cmr_DOWNLOAD_DIR}

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://cmake.org/files/v3.4/${cmr_CMAKE_RELEASE}.tar.gz
    - tar -xf ${cmr_DOWNLOAD_DIR}/${cmr_CMAKE_RELEASE}.tar.gz --directory ${cmr_INSTALL_DIR}

    # NOTE: LibCMaker lib deps.
    - git clone https://github.com/LibCMaker/LibCMaker.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker
    - git clone https://github.com/LibCMaker/LibCMaker_GoogleTest.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_GoogleTest
# Only for MSVC #    - git clone https://github.com/LibCMaker/LibCMaker_Dirent.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Dirent
    - git clone https://github.com/LibCMaker/LibCMaker_Expat.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Expat
    - git clone https://github.com/LibCMaker/LibCMaker_FreeType.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_FreeType


  script:
    - cd ${cmr_BUILD_DIR}

    - ${cmr_CMAKE_CMD} ${cmr_SAMPLE_DIR}
        -Dcmr_BUILD_MULTIPROC_CNT=${cmr_JOBS_CNT}
        -Dcmr_PRINT_DEBUG=ON
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_COLOR_MAKEFILE=ON
        -DBUILD_TESTING=${cmr_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX=${cmr_INSTALL_DIR}
        -Dcmr_DOWNLOAD_DIR=${cmr_DOWNLOAD_DIR}
        -Dcmr_UNPACKED_DIR=${cmr_DOWNLOAD_DIR}/unpacked
          -DCMAKE_BUILD_TYPE=${cmr_CMAKE_BUILD_TYPE}
          -DBUILD_SHARED_LIBS=${cmr_BUILD_SHARED_LIBS}

    - ${cmr_CMAKE_CMD} --build . -- ${cmr_JOBS}

    - ${cmr_CTEST_CMD} --output-on-failure


build_linux_gcc: &build_linux_gcc
  <<: *build_linux
  compiler: gcc


build_linux_clang: &build_linux_clang
  <<: *build_linux
  compiler: clang


# === Windows ===

build_windows: &build_windows
  stage: Test
  os: windows
  env: &build_windows_env
    - cmr_TARGET_OS=windows

    - cmr_CMAKE_RELEASE=cmake-3.11.0-win64-x64
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}
    - cmr_CMAKE_CMD=${cmr_CMAKE_DIR}/bin/cmake
    - cmr_CTEST_CMD=${cmr_CMAKE_DIR}/bin/ctest

    - cmr_CMAKE_BUILD_TYPE=Release

    - PATH=${cmr_INSTALL_DIR}/bin:${PATH}

  before_install:
    - cp -r ${cmr_SAMPLE_SRC_DIR} ${cmr_WORK_DIR}
    - mkdir ${cmr_SAMPLE_LIB_DIR}
    - cp -r ${cmr_REPO_DIR} ${cmr_SAMPLE_LIB_DIR}

    - mkdir ${cmr_BUILD_DIR}
    - mkdir ${cmr_INSTALL_DIR}
    - mkdir ${cmr_DOWNLOAD_DIR}

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://cmake.org/files/v3.11/${cmr_CMAKE_RELEASE}.zip
    - 7z.exe x -aoa -o${cmr_INSTALL_DIR} ${cmr_DOWNLOAD_DIR}/${cmr_CMAKE_RELEASE}.zip

    # NOTE: LibCMaker lib deps.
    - git clone https://github.com/LibCMaker/LibCMaker.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker
    - git clone https://github.com/LibCMaker/LibCMaker_GoogleTest.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_GoogleTest
    - git clone https://github.com/LibCMaker/LibCMaker_Dirent.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Dirent
    - git clone https://github.com/LibCMaker/LibCMaker_Expat.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Expat
    - git clone https://github.com/LibCMaker/LibCMaker_FreeType.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_FreeType

  script:
    - cd ${cmr_BUILD_DIR}

    - ${cmr_CMAKE_CMD} ${cmr_SAMPLE_DIR}
        -Dcmr_BUILD_MULTIPROC_CNT=${cmr_JOBS_CNT}
        -Dcmr_PRINT_DEBUG=ON
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_COLOR_MAKEFILE=ON
        -DBUILD_TESTING=${cmr_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX=${cmr_INSTALL_DIR}
        -Dcmr_DOWNLOAD_DIR=${cmr_DOWNLOAD_DIR}
        -Dcmr_UNPACKED_DIR=${cmr_DOWNLOAD_DIR}/unpacked
          -DCMAKE_BUILD_TYPE=${cmr_CMAKE_BUILD_TYPE}
          -DBUILD_SHARED_LIBS=${cmr_BUILD_SHARED_LIBS}
        -DCMAKE_GENERATOR="${cmr_CMAKE_GENERATOR}"
          -DCMAKE_GENERATOR_PLATFORM="${cmr_CMAKE_GENERATOR_PLATFORM}"
          -DCMAKE_GENERATOR_TOOLSET="${cmr_CMAKE_GENERATOR_TOOLSET}"
          -DCMAKE_CONFIGURATION_TYPES=${cmr_CMAKE_BUILD_TYPE}

    - ${cmr_CMAKE_CMD} --build . --config ${cmr_CMAKE_BUILD_TYPE}

    - ${cmr_CTEST_CMD} --output-on-failure --build-config ${cmr_CMAKE_BUILD_TYPE}


build_windows_msvc: &build_windows_msvc
  <<: *build_windows
  env: &build_windows_msvc_env
    - *build_windows_env
    - cmr_CMAKE_GENERATOR="Visual Studio 15 2017"


build_windows_msvc_x64: &build_windows_msvc_x64
  <<: *build_windows_msvc
  env: &build_windows_msvc_x64_env
    - *build_windows_msvc_env
    - cmr_CMAKE_GENERATOR_PLATFORM="x64"
    - cmr_CMAKE_GENERATOR_TOOLSET="v141,host=x64"


build_windows_msvc_x32: &build_windows_msvc_x32
  <<: *build_windows_msvc
  env: &build_windows_msvc_x32_env
    - *build_windows_msvc_env
    - cmr_CMAKE_GENERATOR_PLATFORM="Win32"
    - cmr_CMAKE_GENERATOR_TOOLSET="v141,host=x64"


build_windows_msvc_winxp: &build_windows_msvc_winxp
  <<: *build_windows_msvc
  env: &build_windows_msvc_winxp_env
    - *build_windows_msvc_env
    - cmr_CMAKE_GENERATOR_PLATFORM="Win32"
    - cmr_CMAKE_GENERATOR_TOOLSET="v141_xp,host=x64"


# === Android ===

build_android: &build_android
  stage: Test
  os: linux
  dist: bionic
  addons:
    apt:
      packages:
        - ninja-build

  env: &build_android_env
    - cmr_TARGET_OS=android
    - cmr_JOBS="-j${cmr_JOBS_CNT}"

    - cmr_CMAKE_RELEASE=cmake-3.6.0-Linux-x86_64
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}
    - cmr_CMAKE_CMD=${cmr_CMAKE_DIR}/bin/cmake
    - cmr_CTEST_CMD=${cmr_CMAKE_DIR}/bin/ctest

    - cmr_CMAKE_GENERATOR="Ninja"
    - cmr_CMAKE_BUILD_TYPE=Release

    - cmr_ANDROID_NDK_VERSION=r21
    - cmr_ANDROID_NDK_NAME=android-ndk-${cmr_ANDROID_NDK_VERSION}
    - cmr_ANDROID_NDK_PLATFORM=${cmr_ANDROID_NDK_NAME}-linux-x86_64
    - cmr_ANDROID_NDK=${cmr_INSTALL_DIR}/${cmr_ANDROID_NDK_NAME}

    - cmr_CMAKE_TOOLCHAIN_FILE=${cmr_ANDROID_NDK}/build/cmake/android.toolchain.cmake

    - cmr_ANDROID_CPP_FEATURES="rtti exceptions"
    - cmr_ANDROID_TOOLCHAIN=clang

    - ANDROID_HOME=${cmr_INSTALL_DIR}/android-sdk
    - cmr_ANDROID_CMD_TOOLS_VERSION=6200805
    - cmr_ANDROID_CMD_TOOLS_FILE_NAME=commandlinetools-linux-${cmr_ANDROID_CMD_TOOLS_VERSION}_latest.zip

    - PATH=${ANDROID_HOME}/cmdline-tools/tools/bin:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/emulator:${PATH}

  before_install:
    - cp -r ${cmr_SAMPLE_SRC_DIR} ${cmr_WORK_DIR}
    - mkdir ${cmr_SAMPLE_LIB_DIR}
    - cp -r ${cmr_REPO_DIR} ${cmr_SAMPLE_LIB_DIR}

    - mkdir ${cmr_BUILD_DIR}
    - mkdir ${cmr_INSTALL_DIR}
    - mkdir ${cmr_DOWNLOAD_DIR}
    - mkdir -p ${ANDROID_HOME}/cmdline-tools
    # https://stackoverflow.com/a/60598900
    - mkdir -p ${ANDROID_HOME}/platforms  # 'platforms' dir must be, at least empty.

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://cmake.org/files/v3.6/${cmr_CMAKE_RELEASE}.tar.gz
    - tar -xf ${cmr_DOWNLOAD_DIR}/${cmr_CMAKE_RELEASE}.tar.gz --directory ${cmr_INSTALL_DIR}

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://dl.google.com/android/repository/${cmr_ANDROID_NDK_PLATFORM}.zip
    - unzip -q ${cmr_DOWNLOAD_DIR}/${cmr_ANDROID_NDK_PLATFORM}.zip -d ${cmr_INSTALL_DIR}

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://dl.google.com/android/repository/${cmr_ANDROID_CMD_TOOLS_FILE_NAME}
    - unzip -q ${cmr_DOWNLOAD_DIR}/${cmr_ANDROID_CMD_TOOLS_FILE_NAME} -d ${ANDROID_HOME}/cmdline-tools

    # https://stackoverflow.com/a/60598900
    - yes | sdkmanager --licenses
    - sdkmanager "emulator"
    - sdkmanager "platform-tools"
    - sdkmanager "system-images;android-${cmr_ANDROID_EMULATOR_API_LEVEL};default;${cmr_ANDROID_ABI}"

    # NOTE: LibCMaker lib deps.
    - git clone https://github.com/LibCMaker/LibCMaker.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker
    - git clone https://github.com/LibCMaker/LibCMaker_GoogleTest.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_GoogleTest
# Only for MSVC #    - git clone https://github.com/LibCMaker/LibCMaker_Dirent.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Dirent
    - git clone https://github.com/LibCMaker/LibCMaker_Expat.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Expat
    - git clone https://github.com/LibCMaker/LibCMaker_FreeType.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_FreeType

  script:
    - cd ${cmr_BUILD_DIR}

    - ${cmr_CMAKE_CMD} --version
#    - ${CC} --version
#    - ${CXX} --version

    - ${cmr_CMAKE_CMD} ${cmr_SAMPLE_DIR}
        -Dcmr_BUILD_MULTIPROC_CNT=${cmr_JOBS_CNT}
        -Dcmr_PRINT_DEBUG=ON
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_COLOR_MAKEFILE=ON
        -DBUILD_TESTING=${cmr_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX=${cmr_INSTALL_DIR}
        -Dcmr_DOWNLOAD_DIR=${cmr_DOWNLOAD_DIR}
        -Dcmr_UNPACKED_DIR=${cmr_DOWNLOAD_DIR}/unpacked
          -DCMAKE_BUILD_TYPE=${cmr_CMAKE_BUILD_TYPE}
          -DBUILD_SHARED_LIBS=${cmr_BUILD_SHARED_LIBS}
        -DANDROID_NDK=${cmr_ANDROID_NDK}
          -DCMAKE_TOOLCHAIN_FILE=${cmr_CMAKE_TOOLCHAIN_FILE}
          -DCMAKE_GENERATOR="${cmr_CMAKE_GENERATOR}"
          -DANDROID_ABI=${cmr_ANDROID_ABI}
          -DANDROID_NATIVE_API_LEVEL=${cmr_ANDROID_NATIVE_API_LEVEL}
          -DANDROID_TOOLCHAIN=${cmr_ANDROID_TOOLCHAIN}
          -DANDROID_STL=${cmr_ANDROID_STL}
          -DANDROID_CPP_FEATURES="${cmr_ANDROID_CPP_FEATURES}"

    - ${cmr_CMAKE_CMD} --build . -- ${cmr_JOBS}

    # Start the emulator.
    # NOTE: Emulator for 'arm64-v8a' does not start on Travis CI with success.
    # NOTE: Emulator for 'armeabi-v7a' API=16 on Linux executes programs
    #       regularly with "Illegal instruction".
    # NOTE: Emulator for 'armeabi-v7a' API=24 on Linux works fine.

    # http://mywiki.wooledge.org/BashSheet
    # [command] & [command]
    # A single ampersand terminates an asynchronous command. An ampersand does
    # the same thing as a semicolon or newline in that it indicates the end
    # of a command, but it causes Bash to execute the command asynchronously.
    # That means Bash will run it in the background and run the next command
    # immediately after, without waiting for the former to end.
    # Only the command before the & is executed asynchronously
    # and you must not put a ; after the &, the & replaces the ;.
#    - if [[ ${cmr_ANDROID_ABI} != "arm64-v8a" ]]; then
#        echo | avdmanager create avd -f -n fg_test -c 1024M -k "system-images;android-${cmr_ANDROID_EMULATOR_API_LEVEL};default;${cmr_ANDROID_ABI}" ;
#        emulator -avd fg_test -memory 1024 -no-window -gpu auto -no-accel -no-snapshot -no-audio -camera-back none -camera-front none &
#        ${cmr_SAMPLE_LIB_DIR}/LibCMaker/ci/android-wait-for-emulator.sh ;
#        adb shell input keyevent 82 &
#      fi

    - if [[ ${cmr_ANDROID_ABI} == "arm64-v8a" ]]; then travis_terminate 0 ; fi
    - echo | avdmanager create avd -f -n fg_test -c 1024M -k "system-images;android-${cmr_ANDROID_EMULATOR_API_LEVEL};default;${cmr_ANDROID_ABI}"
    - emulator -avd fg_test -memory 1024 -no-window -gpu auto -no-accel -no-snapshot -no-audio -camera-back none -camera-front none &
    - ${cmr_SAMPLE_LIB_DIR}/LibCMaker/ci/android-wait-for-emulator.sh
    - adb shell input keyevent 82 &

    # Run the tests.
    - ${cmr_CTEST_CMD} --output-on-failure


# === macOS ===

build_macos: &build_macos
  stage: Test
  os: osx
  osx_image: xcode10.2
  compiler: clang

  env: &build_macos_env
    - cmr_TARGET_OS=macos

    - cmr_CMAKE_RELEASE_VER=3.8
    - cmr_CMAKE_RELEASE=cmake-${cmr_CMAKE_RELEASE_VER}.0-Darwin-x86_64
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}/CMake.app/Contents
    - cmr_CMAKE_CMD=${cmr_CMAKE_DIR}/bin/cmake
    - cmr_CTEST_CMD=${cmr_CMAKE_DIR}/bin/ctest

  before_install:
    - cp -r ${cmr_SAMPLE_SRC_DIR} ${cmr_WORK_DIR}
    - mkdir ${cmr_SAMPLE_LIB_DIR}
    - cp -r ${cmr_REPO_DIR} ${cmr_SAMPLE_LIB_DIR}

    - mkdir ${cmr_BUILD_DIR}
    - mkdir ${cmr_INSTALL_DIR}
    - mkdir ${cmr_DOWNLOAD_DIR}

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://cmake.org/files/v${cmr_CMAKE_RELEASE_VER}/${cmr_CMAKE_RELEASE}.tar.gz
    - tar -xf ${cmr_DOWNLOAD_DIR}/${cmr_CMAKE_RELEASE}.tar.gz --directory ${cmr_INSTALL_DIR}

    # NOTE: LibCMaker lib deps.
    - git clone https://github.com/LibCMaker/LibCMaker.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker
    - git clone https://github.com/LibCMaker/LibCMaker_GoogleTest.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_GoogleTest
# Only for MSVC #    - git clone https://github.com/LibCMaker/LibCMaker_Dirent.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Dirent
    - git clone https://github.com/LibCMaker/LibCMaker_Expat.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Expat
    - git clone https://github.com/LibCMaker/LibCMaker_FreeType.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_FreeType


build_macos_xcode: &build_macos_xcode
  <<: *build_macos
  env: &build_macos_xcode_env
    - *build_macos_env
    - cmr_JOBS="-jobs ${cmr_JOBS_CNT}"

  script:
    - cd ${cmr_BUILD_DIR}

    - ${cmr_CMAKE_CMD} ${cmr_SAMPLE_DIR}
        -Dcmr_BUILD_MULTIPROC_CNT:STRING=${cmr_JOBS_CNT}
        -Dcmr_PRINT_DEBUG:BOOL=ON
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
        -DCMAKE_COLOR_MAKEFILE:BOOL=ON
        -DBUILD_TESTING:BOOL=${cmr_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX:PATH=${cmr_INSTALL_DIR}
        -Dcmr_DOWNLOAD_DIR:PATH=${cmr_DOWNLOAD_DIR}
        -Dcmr_UNPACKED_DIR:PATH=${cmr_DOWNLOAD_DIR}/unpacked
          -DCMAKE_BUILD_TYPE:STRING=${cmr_CMAKE_BUILD_TYPE}
          -DBUILD_SHARED_LIBS:BOOL=${cmr_BUILD_SHARED_LIBS}
        -DCMAKE_GENERATOR:STRING="Xcode"
          -DCMAKE_CONFIGURATION_TYPES:STRING=${cmr_CMAKE_BUILD_TYPE}

    - ${cmr_CMAKE_CMD} --build . --config ${cmr_CMAKE_BUILD_TYPE} -- ${cmr_JOBS}

    - ${cmr_CTEST_CMD} --output-on-failure --build-config ${cmr_CMAKE_BUILD_TYPE}


build_macos_make: &build_macos_make
  <<: *build_macos
  env: &build_macos_make_env
    - *build_macos_env
    - cmr_JOBS="-j ${cmr_JOBS_CNT}"

  script:
    - cd ${cmr_BUILD_DIR}

    - ${cmr_CMAKE_CMD} ${cmr_SAMPLE_DIR}
        -Dcmr_BUILD_MULTIPROC_CNT:STRING=${cmr_JOBS_CNT}
        -Dcmr_PRINT_DEBUG:BOOL=ON
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
        -DCMAKE_COLOR_MAKEFILE:BOOL=ON
        -DBUILD_TESTING:BOOL=${cmr_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX:PATH=${cmr_INSTALL_DIR}
        -Dcmr_DOWNLOAD_DIR:PATH=${cmr_DOWNLOAD_DIR}
        -Dcmr_UNPACKED_DIR:PATH=${cmr_DOWNLOAD_DIR}/unpacked
          -DCMAKE_BUILD_TYPE:STRING=${cmr_CMAKE_BUILD_TYPE}
          -DBUILD_SHARED_LIBS:BOOL=${cmr_BUILD_SHARED_LIBS}
        -DCMAKE_GENERATOR:STRING="Unix Makefiles"

    - ${cmr_CMAKE_CMD} --build . -- ${cmr_JOBS}

    - ${cmr_CTEST_CMD} --output-on-failure


# === iOS ===

build_ios: &build_ios_xcode
  stage: Test
  os: osx
  osx_image: xcode10.2
  compiler: clang

  env: &build_ios_xcode_env
    - cmr_TARGET_OS=ios
    - cmr_JOBS="-jobs ${cmr_JOBS_CNT}"

    - cmr_CMAKE_RELEASE_VER=3.15
    - cmr_CMAKE_RELEASE=cmake-${cmr_CMAKE_RELEASE_VER}.0-Darwin-x86_64
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}/CMake.app/Contents
    - cmr_CMAKE_CMD=${cmr_CMAKE_DIR}/bin/cmake
    - cmr_CTEST_CMD=${cmr_CMAKE_DIR}/bin/ctest

  before_install:
    - cp -r ${cmr_SAMPLE_SRC_DIR} ${cmr_WORK_DIR}
    - mkdir ${cmr_SAMPLE_LIB_DIR}
    - cp -r ${cmr_REPO_DIR} ${cmr_SAMPLE_LIB_DIR}

    - mkdir ${cmr_BUILD_DIR}
    - mkdir ${cmr_INSTALL_DIR}
    - mkdir ${cmr_DOWNLOAD_DIR}

    - wget -nv -c -N -P ${cmr_DOWNLOAD_DIR} https://cmake.org/files/v${cmr_CMAKE_RELEASE_VER}/${cmr_CMAKE_RELEASE}.tar.gz
    - tar -xf ${cmr_DOWNLOAD_DIR}/${cmr_CMAKE_RELEASE}.tar.gz --directory ${cmr_INSTALL_DIR}

    # NOTE: LibCMaker lib deps.
    - git clone https://github.com/LibCMaker/LibCMaker.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker
    - git clone https://github.com/LibCMaker/LibCMaker_GoogleTest.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_GoogleTest
# Only for MSVC #    - git clone https://github.com/LibCMaker/LibCMaker_Dirent.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Dirent
    - git clone https://github.com/LibCMaker/LibCMaker_Expat.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_Expat
    - git clone https://github.com/LibCMaker/LibCMaker_FreeType.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker_FreeType


  script:
    - cd ${cmr_BUILD_DIR}

    - ${cmr_CMAKE_CMD} ${cmr_SAMPLE_DIR}
        -Dcmr_BUILD_MULTIPROC_CNT:STRING=${cmr_JOBS_CNT}
        -Dcmr_PRINT_DEBUG:BOOL=ON
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
        -DCMAKE_COLOR_MAKEFILE:BOOL=ON
        -DBUILD_TESTING:BOOL=${cmr_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX:PATH=${cmr_INSTALL_DIR}
        -Dcmr_DOWNLOAD_DIR:PATH=${cmr_DOWNLOAD_DIR}
        -Dcmr_UNPACKED_DIR:PATH=${cmr_DOWNLOAD_DIR}/unpacked
          -DCMAKE_BUILD_TYPE:STRING=${cmr_CMAKE_BUILD_TYPE}
          -DBUILD_SHARED_LIBS:BOOL=${cmr_BUILD_SHARED_LIBS}
        -DCMAKE_GENERATOR:STRING="Xcode"
          -DCMAKE_CONFIGURATION_TYPES:STRING=${cmr_CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${cmr_SAMPLE_LIB_DIR}/LibCMaker/cmake/ios.toolchain.cmake
          -DPLATFORM=SIMULATOR64
          -DENABLE_VISIBILITY=${cmr_BUILD_SHARED_LIBS}

    - ${cmr_CMAKE_CMD} --build . --config ${cmr_CMAKE_BUILD_TYPE} -- ${cmr_JOBS}

#    - ${cmr_CTEST_CMD} --output-on-failure --build-config ${cmr_CMAKE_BUILD_TYPE}


# === Build matrix ===

jobs:
  include:

# Linux, gcc
    - <<: *build_linux_gcc
      name: "Linux, gcc, debug, shared"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_linux_gcc
      name: "Linux, gcc, debug, static"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_linux_gcc
      name: "Linux, gcc, release, shared"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_linux_gcc
      name: "Linux, gcc, release, static"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=OFF

# Linux, clang
    - <<: *build_linux_clang
      name: "Linux, clang, debug, shared"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_linux_clang
      name: "Linux, clang, debug, static"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_linux_clang
      name: "Linux, clang, release, shared"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_linux_clang
      name: "Linux, clang, release, static"
      env:
        - *build_linux_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=OFF

# Windows, msvc
    - <<: *build_windows_msvc_x64
      name: "Windows, msvc, x64, shared"
      if: branch = do_not_build_with_travis_ci
      env:
        - *build_windows_msvc_x64_env
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_windows_msvc_x64
      name: "Windows, msvc, x64, static"
      if: branch = do_not_build_with_travis_ci
      env:
        - *build_windows_msvc_x64_env
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_windows_msvc_x32
      name: "Windows, msvc, x32, shared"
      if: branch = do_not_build_with_travis_ci
      env:
        - *build_windows_msvc_x32_env
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_windows_msvc_x32
      name: "Windows, msvc, x32, static"
      if: branch = do_not_build_with_travis_ci
      env:
        - *build_windows_msvc_x32_env
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_windows_msvc_winxp
      name: "Windows, msvc, winxp, shared"
      if: branch = do_not_build_with_travis_ci
      env:
        - *build_windows_msvc_winxp_env
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_windows_msvc_winxp
      name: "Windows, msvc, winxp, static"
      if: branch = do_not_build_with_travis_ci
      env:
        - *build_windows_msvc_winxp_env
        - cmr_BUILD_SHARED_LIBS=OFF

# Android, shared
    - <<: *build_android
      name: "Android, shared, armeabi-v7a"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=ON
        - cmr_ANDROID_STL=c++_shared
        - cmr_ANDROID_ABI=armeabi-v7a
        - cmr_ANDROID_NATIVE_API_LEVEL=16
        - cmr_ANDROID_EMULATOR_API_LEVEL=24

    - <<: *build_android
      name: "Android, shared, arm64-v8a"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=ON
        - cmr_ANDROID_STL=c++_shared
        - cmr_ANDROID_ABI=arm64-v8a
        - cmr_ANDROID_NATIVE_API_LEVEL=21
        - cmr_ANDROID_EMULATOR_API_LEVEL=24

    - <<: *build_android
      name: "Android, shared, x86"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=ON
        - cmr_ANDROID_STL=c++_shared
        - cmr_ANDROID_ABI=x86
        - cmr_ANDROID_NATIVE_API_LEVEL=16
        - cmr_ANDROID_EMULATOR_API_LEVEL=16

    - <<: *build_android
      name: "Android, shared, x86_64"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=ON
        - cmr_ANDROID_STL=c++_shared
        - cmr_ANDROID_ABI=x86_64
        - cmr_ANDROID_NATIVE_API_LEVEL=21
        - cmr_ANDROID_EMULATOR_API_LEVEL=21

# Android, static
    - <<: *build_android
      name: "Android, static, armeabi-v7a"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=OFF
        - cmr_ANDROID_STL=c++_static
        - cmr_ANDROID_ABI=armeabi-v7a
        - cmr_ANDROID_NATIVE_API_LEVEL=16
        - cmr_ANDROID_EMULATOR_API_LEVEL=24

    - <<: *build_android
      name: "Android, static, arm64-v8a"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=OFF
        - cmr_ANDROID_STL=c++_static
        - cmr_ANDROID_ABI=arm64-v8a
        - cmr_ANDROID_NATIVE_API_LEVEL=21
        - cmr_ANDROID_EMULATOR_API_LEVEL=24

    - <<: *build_android
      name: "Android, static, x86"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=OFF
        - cmr_ANDROID_STL=c++_static
        - cmr_ANDROID_ABI=x86
        - cmr_ANDROID_NATIVE_API_LEVEL=16
        - cmr_ANDROID_EMULATOR_API_LEVEL=16

    - <<: *build_android
      name: "Android, static, x86_64"
      env:
        - *build_android_env
        - cmr_BUILD_SHARED_LIBS=OFF
        - cmr_ANDROID_STL=c++_static
        - cmr_ANDROID_ABI=x86_64
        - cmr_ANDROID_NATIVE_API_LEVEL=21
        - cmr_ANDROID_EMULATOR_API_LEVEL=21

# macOS, clang, Xcode
    - <<: *build_macos_xcode
      name: "macOS, clang, Xcode, debug, shared"
      env:
        - *build_macos_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_macos_xcode
      name: "macOS, clang, Xcode, debug, static"
      env:
        - *build_macos_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_macos_xcode
      name: "macOS, clang, Xcode, release, shared"
      env:
        - *build_macos_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_macos_xcode
      name: "macOS, clang, Xcode, release, static"
      env:
        - *build_macos_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=OFF

# macOS, clang, Make
    - <<: *build_macos_make
      name: "macOS, clang, Make, debug, shared"
      env:
        - *build_macos_make_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_macos_make
      name: "macOS, clang, Make, debug, static"
      env:
        - *build_macos_make_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_macos_make
      name: "macOS, clang, Make, release, shared"
      env:
        - *build_macos_make_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_macos_make
      name: "macOS, clang, Make, release, static"
      env:
        - *build_macos_make_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=OFF

# ios, clang, Xcode
    - <<: *build_ios_xcode
      name: "ios, clang, Xcode, debug, shared"
      env:
        - *build_ios_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_ios_xcode
      name: "ios, clang, Xcode, debug, static"
      env:
        - *build_ios_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Debug
        - cmr_BUILD_SHARED_LIBS=OFF

    - <<: *build_ios_xcode
      name: "ios, clang, Xcode, release, shared"
      env:
        - *build_ios_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=ON

    - <<: *build_ios_xcode
      name: "ios, clang, Xcode, release, static"
      env:
        - *build_ios_xcode_env
        - cmr_CMAKE_BUILD_TYPE=Release
        - cmr_BUILD_SHARED_LIBS=OFF


notifications:
  email:
    recipients:
      - nfeodonit@yandex.com
    on_success: always
    on_failure: always
